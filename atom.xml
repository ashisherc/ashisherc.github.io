<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ashish Prajapati</title>
  
  <subtitle>Lead software Engineer</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ashisherc.com/"/>
  <updated>2017-11-05T19:55:49.347Z</updated>
  <id>https://ashisherc.com/</id>
  
  <author>
    <name>Ashish Prajapati</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Node.js Logging Done the Right Way</title>
    <link href="https://ashisherc.com/2017/11/06/node-js-logging-done-the-right-way/"/>
    <id>https://ashisherc.com/2017/11/06/node-js-logging-done-the-right-way/</id>
    <published>2017-11-05T19:30:00.000Z</published>
    <updated>2017-11-05T19:55:49.347Z</updated>
    
    <content type="html"><![CDATA[<p>I’m going to talk about logging in nodejs in this article. Logging is the most important part of your application but to make it work proper in scalable applications like microservice architectures becomes difficult, as you would want to know the logs you see are coming from where!</p><p>I will show you how I make logging in nodejs streamlined and avoid logging at multiple places unnecessarily.</p><!-- TOC --><h2 id="Implementing-Logging-in-Nodejs"><a href="#Implementing-Logging-in-Nodejs" class="headerlink" title="Implementing Logging in Nodejs"></a>Implementing Logging in Nodejs</h2><p>A proper logging structure will make it easy for you and coming developers to put logs in your application. I’m using express framework in this article, but you can implement the same in any framework of your choice.</p><p>We need a logging library to print logs, <a href="https://github.com/trentm/node-bunyan" target="_blank" rel="external">Bunyan</a> is a good option out there. Remember you can always replace your logger library easily inside our logger service and that’s the benefit of implementing this logger service.</p><p>You can follow along the article and go through the code on <a href="https://github.com/ashisherc/demo-nodejs-logging" target="_blank" rel="external">github</a></p><h3 id="Let’s-make-a-logger-service"><a href="#Let’s-make-a-logger-service" class="headerlink" title="Let’s make a logger service"></a>Let’s make a logger service</h3><p>We will make a modular logger that can be imported anywhere in your project without worrying about changing the logger at anytime and not affecting your whole project. If you ever need to change level or you want to use a new logging library, you can do so in this file.</p><figure class="highlight js"><figcaption><span>services/logger.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bunyan = <span class="built_in">require</span>(<span class="string">"bunyan"</span>); <span class="comment">// Logger library</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * You can make a wrapper here for the logging levels</span><br><span class="line"> * and export your wrapper as the logger, which will</span><br><span class="line"> * support a few logger libraries</span><br><span class="line"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> logger = bunyan.createLogger(&#123;</span><br><span class="line">    name: <span class="string">"node-logger-demo"</span>,  <span class="comment">// Name can be service name and extra details you may wan to put.</span></span><br><span class="line">    level: <span class="string">"info"</span> <span class="comment">// Logger level should be read from environment variables.</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// We will add remote stream here next </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = logger;</span><br></pre></td></tr></table></figure><h3 id="Implement-error-handler-in-express"><a href="#Implement-error-handler-in-express" class="headerlink" title="Implement error handler in express"></a>Implement error handler in express</h3><p>If you have scaffolded your app using express generator, you will have an error handler created for you, else you want to create one shown below inside your app.js file. This middleware accepts first parameter as error and is called whenever you make a next(error) call.</p><p>If you are a newbie in express, there is an example of next() coming in this article, keep going.</p><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> logger = <span class="built_in">require</span>(<span class="string">'./services/logger'</span>); <span class="comment">// require the logger that we just created.</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// Put this middleware at last after defining your routes. </span></span><br><span class="line"><span class="comment">// error handler</span></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span> (<span class="params">err, req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * Log the error using our logger service</span><br><span class="line">   * We will control logging in dev and prod environment in</span><br><span class="line">   * our logger service itself.</span><br><span class="line">   */</span></span><br><span class="line">  logger.error(err);</span><br><span class="line"></span><br><span class="line">  res.status(err.status || <span class="number">500</span>);</span><br><span class="line">  res.send(&#123; <span class="string">"error"</span>: err.message &#125;);</span><br><span class="line">  <span class="comment">// send only the error message that you would like to send to user</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>You can import the logger service in all your project modules and log easily the same way it’s used inside app.js error handler. But now you will do that rarely because of this error handler which logs every error you pass inside next as next(error) from your routes. Lets put this together and see how it works.</p><h3 id="Using-next-error-inside-your-routes"><a href="#Using-next-error-inside-your-routes" class="headerlink" title="Using next(error) inside your routes"></a>Using next(error) inside your routes</h3><p>This is one route registered with app.js, and is attached at api endpoint /api/user. If you make a mongoose query or call a function which returns a promise or accepts a callback function, you can always do next(error) inside catch of promise or callback function if error is not null. This avoid you writing an additional logging statement and also makes it easy to send a response to user with proper error message, all because of error handler that we wrote just above.</p><figure class="highlight js"><figcaption><span>routes/user.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* GET users listing. */</span></span><br><span class="line">router.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * make a db query to get users</span><br><span class="line">     * I'm hard coding a dummy json for the purpose</span><br><span class="line">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> result = &#123;</span><br><span class="line">        users: [&#123; name: <span class="string">"user1"</span> &#125;, &#123; name: <span class="string">"user2"</span> &#125;]</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * If something goes wrong, error is sent to next</span><br><span class="line">     * and than its logged by error handler</span><br><span class="line">     */</span></span><br><span class="line">    next(error);</span><br><span class="line">    <span class="keyword">return</span>; <span class="comment">// return to stop further execution</span></span><br><span class="line">  &#125;</span><br><span class="line">  res.send(result);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure><p>Above code snippet passes the error to error handler, hence it does not require to import the logger service and the error automatically gets logged inside the error handler we wrote above. You can still import logger service to log info and other level, take a look at the below code snippet.</p><h3 id="Using-logger-service-to-log-info-debug-etc-logs"><a href="#Using-logger-service-to-log-info-debug-etc-logs" class="headerlink" title="Using logger service to log info, debug etc logs"></a>Using logger service to log info, debug etc logs</h3><figure class="highlight js"><figcaption><span>routes/user.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> logger = <span class="built_in">require</span>(<span class="string">'../services/logger'</span>);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/:id'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> user = &#123;</span><br><span class="line">    name: <span class="string">"user1"</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// use logger service to log info.</span></span><br><span class="line">  logger.info(<span class="string">`requested user id: <span class="subst">$&#123;req.params.id&#125;</span>`</span>);</span><br><span class="line">  res.send(user)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure><p>Here we imported the logger service and used it to log an info about the requested users id.</p><p>You can use the logger this way anywhere in your project and log anything. The best part is again replace the logger library inside logger service, change the log level and any settings and you are good to go with new library without any extra changes. We are done with logging setup here but now lets see how we can see those logs on a remote website by just enhancing our logger service, after all who wants to see logs in a log file anymore!</p><h2 id="Implement-remote-log-stream"><a href="#Implement-remote-log-stream" class="headerlink" title="Implement remote log stream"></a>Implement remote log stream</h2><p>If you haven’t been using any remote logging service before, you should now. This allows viewing your logs at nice place by just login into your account and lets you analyze the logs, you can do filtering and all kind of stuff easily. We will integrate <a href="https://logentries.com/" target="_blank" rel="external">logentries</a> in our logger service to see and analyze logs at logentries. There are other choices for logging service you can choose according to your needs. I have used logentries in a few of my projects and it does really a good job.</p><h3 id="Integrate-logentries"><a href="#Integrate-logentries" class="headerlink" title="Integrate logentries"></a>Integrate logentries</h3><p>We need a bunyan transport to send logs to logentries, The below one is very light implementation over tcp, Install <a href="https://github.com/ashisherc/bunyan-transport" target="_blank" rel="external">bunyan-transport</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save bunyan-transport</span><br></pre></td></tr></table></figure><p>Now lets require this module to make our logger service send logs to logentries. Make changes to the logger.js file as shown below, we only changed our logger service and everything just works as it is, but now you will see logs at logentries.com instead of the console.<br>Bunyan prints a lot more information than you might need sometimes, you can configure which key values to be sent to logentries inside bunyan transport. You can read more about it here at <a href="https://github.com/ashisherc/bunyan-transport" target="_blank" rel="external">bunyan-transport</a></p><figure class="highlight"><figcaption><span>services/logger.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const bunyanTransport = require('bunyan-transport');</span><br><span class="line"></span><br><span class="line">logger = bunyan.createLogger(&#123;</span><br><span class="line">    name: 'node-logger-demo',</span><br><span class="line">    streams: [&#123;</span><br><span class="line">        level: "info,</span><br><span class="line">        stream: new bunyanTransport.logentriesStream(&#123;</span><br><span class="line">            token: "token" // logentries token</span><br><span class="line">        &#125;),</span><br><span class="line">        type: 'raw'</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = logger;</span><br></pre></td></tr></table></figure><p>Till here its all fine, but you may be thinking to use this only in prod environment and not in development mode. You can sure do that, and I guess you already have your own way working with different environments, but still here’s a snippet to put all together.</p><h3 id="Production-and-dev-environment-setup-in-logger-service"><a href="#Production-and-dev-environment-setup-in-logger-service" class="headerlink" title="Production and dev environment setup in logger service"></a>Production and dev environment setup in logger service</h3><p>I always keep a separate group of modules to read and validate environment variables and export as config to consume in my project. I will directly use the environment variables here to show you the working of logger. Based on type of environment we create a logger and export that from logger service, which includes log level as well.</p><figure class="highlight js"><figcaption><span>services/logger.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bunyan = <span class="built_in">require</span>(<span class="string">"bunyan"</span>);</span><br><span class="line"><span class="keyword">const</span> bunyanTransport = <span class="built_in">require</span>(<span class="string">'bunyan-transport'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> logger = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV == <span class="string">"production"</span>) &#123;</span><br><span class="line">    logger = bunyan.createLogger(&#123;</span><br><span class="line">        name: <span class="string">'node-logger-demo'</span>,</span><br><span class="line">        streams: [&#123;</span><br><span class="line">            level: process.env.LOG_LEVEL,</span><br><span class="line">            stream: <span class="keyword">new</span> bunyanTransport.logentriesStream(&#123;</span><br><span class="line">                token: process.env.LOG_TOKEN</span><br><span class="line">            &#125;),</span><br><span class="line">            type: <span class="string">'raw'</span></span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    logger = bunyan.createLogger(&#123;</span><br><span class="line">        name: <span class="string">'node-logger-demo'</span>,</span><br><span class="line">        level: process.env.LOG_LEVEL</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = logger;</span><br></pre></td></tr></table></figure><p>So, that’s how I make a streamlined logger in my nodejs projects, please share what tools you use in your projects and any suggestion on how this can be improved, and thanks for reading this article.</p>]]></content>
    
    <summary type="html">
    
      I’m going to talk about logging in nodejs in this article. Logging is the most important part of your application but to make it work proper in scalable applications like microservice architectures becomes difficult, as you would want to know the logs you see are coming from where!

I will show you 
    
    </summary>
    
      <category term="nodejs" scheme="https://ashisherc.com/categories/nodejs/"/>
    
    
      <category term="bunyan" scheme="https://ashisherc.com/tags/bunyan/"/>
    
      <category term="logging" scheme="https://ashisherc.com/tags/logging/"/>
    
  </entry>
  
</feed>
